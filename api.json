{
  "x-stoplight": {
    "docs": {
      "showModels": false
    },
    "id": "vend/specs/api-0-9"
  },
  "swagger": "2.0",
  "info": {
    "version": "0.9",
    "title": "API 0.9",
    "description": "The current state of the original Vend API.",
    "contact": {
      "name": "Vend Developer Relations",
      "url": "https://developers.vendhq.com",
      "email": "api@vendhq.com"
    },
    "license": {
      "name": "Apache 2.0"
    },
    "termsOfService": "https://www.vendhq.com/terms"
  },
  "x-explorer-enabled": false,
  "host": "{domain_prefix}.vendhq.com",
  "basePath": "/api",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/consignment": {
      "get": {
        "description": "**DEPRECATED** This endpoint has a 2.0 equivalent. We recommend using that instead.\nReturns a paginated list of consignments.",
        "summary": "List consignments",
        "tags": [
          "Consignments"
        ],
        "operationId": "ListConsignments",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time",
            "description": "If included, returns only items modified since the given time. The provided date and time should be in **UTC** and formatted according to **ISO 8601**."
          },
          {
            "in": "query",
            "name": "page",
            "type": "number",
            "description": "The number of the page of results to be returned."
          },
          {
            "in": "query",
            "name": "page_size",
            "type": "number",
            "description": "The size of the page of results to be returned."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConsignmentCollection"
            },
            "examples": {
              "application/json": {
                "results": 65,
                "page": 1,
                "page_size": 50,
                "pages": 2,
                "consignments": [
                  {
                    "id": "b8ca3a65-0183-11e4-fbb5-2812b9e74b37",
                    "name": "Stocktake 1",
                    "consignment_date": "2014-08-20 02:36:02",
                    "due_at": null,
                    "received_at": "2014-08-20 02:37:32",
                    "retailer_id": "b1c50056-f019-11e3-a0f5-b8ca3a64f8f4",
                    "outlet_id": "b1e04bd8-f019-11e3-a0f5-b8ca3a64f8f4",
                    "supplier_id": null,
                    "source_outlet_id": null,
                    "status": "STOCKTAKE_COMPLETE",
                    "type": "STOCKTAKE",
                    "accounts_transaction_id": null
                  },
                  {
                    "id": "b8ca3a65-0183-11e4-fbb5-281711e05741",
                    "name": "Stock Transfer",
                    "consignment_date": "2014-08-20 03:07:07",
                    "due_at": "2014-08-21 00:00:00",
                    "received_at": "2014-08-20 03:08:49",
                    "retailer_id": "b1c50056-f019-11e3-a0f5-b8ca3a64f8f4",
                    "outlet_id": "b8ca3a65-0183-11e4-fbb5-2816d2677218",
                    "supplier_id": null,
                    "source_outlet_id": "b1e04bd8-f019-11e3-a0f5-b8ca3a64f8f4",
                    "status": "RECEIVED",
                    "type": "OUTLET",
                    "accounts_transaction_id": null
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new consignment.",
        "summary": "Create a consignment",
        "tags": [
          "Consignments"
        ],
        "operationId": "NewConsignment",
        "parameters": [
          {
            "name": "consignment",
            "in": "body",
            "required": true,
            "description": "A new consignment object.",
            "schema": {
              "$ref": "#/definitions/ConsignmentBase"
            },
            "x-examples": {
              "application/json": {
                "name": "API test 5",
                "outlet_id": "b1e04bd8-f019-11e3-a0f5-b8ca3a64f8f4",
                "status": "OPEN",
                "type": "SUPPLIER"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Consignment"
            },
            "examples": {
              "application/json": {
                "id": "0af7b240-ab83-11e7-eddc-38e5834289e2",
                "name": "API test 5",
                "consignment_date": "2017-05-14 20:40:05",
                "due_at": null,
                "received_at": null,
                "retailer_id": "b1c50056-f019-11e3-a0f5-b8ca3a64f8f4",
                "outlet_id": "b1e04bd8-f019-11e3-a0f5-b8ca3a64f8f4",
                "supplier_id": null,
                "source_outlet_id": null,
                "status": "OPEN",
                "type": "SUPPLIER",
                "accounts_transaction_id": null
              }
            }
          }
        }
      }
    },
    "/consignment/{consignment_id}": {
      "get": {
        "description": "**DEPRECATED** This endpoint has a 2.0 equivalent. We recommend using that instead.\\s\\s\n\\s\\s\nReturns a single consignment with a given ID.",
        "summary": "Get a consignment by ID",
        "tags": [
          "Consignments"
        ],
        "operationId": "GetConsignmentByID",
        "parameters": [
          {
            "name": "consignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "The ID of the consignment to get."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Consignment"
            },
            "examples": {
              "application/json": {
                "id": "0af7b240-ab83-11e7-eddc-38e5215a314f",
                "name": "API test 2 changed",
                "consignment_date": "2017-05-14 20:37:21",
                "due_at": "2017-06-01 00:00:00",
                "received_at": null,
                "retailer_id": "b1c50056-f019-11e3-a0f5-b8ca3a64f8f4",
                "outlet_id": "b1e04bd8-f019-11e3-a0f5-b8ca3a64f8f4",
                "supplier_id": null,
                "source_outlet_id": null,
                "status": "OPEN",
                "type": "SUPPLIER",
                "accounts_transaction_id": null
              }
            }
          }
        }
      },
      "put": {
        "description": "Updates a consignment with the given ID.",
        "summary": "Update a consignment",
        "tags": [
          "Consignments"
        ],
        "operationId": "UpdateConsignment",
        "parameters": [
          {
            "name": "consignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "The ID of the consignment to be updated."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "An updated consignment object.",
            "schema": {
              "$ref": "#/definitions/ConsignmentBase"
            },
            "x-examples": {
              "application/json": {
                "name": "API test 2 changed",
                "consignment_date": "2017-05-14 20:37:21",
                "due_at": "2017-06-01T00:00:00.000Z",
                "received_at": null,
                "retailer_id": "b1c50056-f019-11e3-a0f5-b8ca3a64f8f4",
                "outlet_id": "b1e04bd8-f019-11e3-a0f5-b8ca3a64f8f4",
                "supplier_id": null,
                "source_outlet_id": null,
                "status": "OPEN",
                "type": "SUPPLIER",
                "accounts_transaction_id": null
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Consignment"
            },
            "examples": {
              "application/json": {
                "id": "0af7b240-ab83-11e7-eddc-38e5215a314f",
                "name": "API test 2 changed",
                "consignment_date": "2017-05-14 20:37:21",
                "due_at": "2017-06-01T00:00:00.000Z",
                "received_at": null,
                "retailer_id": "b1c50056-f019-11e3-a0f5-b8ca3a64f8f4",
                "outlet_id": "b1e04bd8-f019-11e3-a0f5-b8ca3a64f8f4",
                "supplier_id": null,
                "source_outlet_id": null,
                "status": "OPEN",
                "type": "SUPPLIER",
                "accounts_transaction_id": null
              }
            }
          }
        }
      },
      "delete": {
        "description": "**DEPRECATED** This endpoint has a 2.0 equivalent. We recommend using that instead.\nDeletes the consignment with a given ID.",
        "summary": "Delete a consignment",
        "tags": [
          "Consignments"
        ],
        "operationId": "DeleteConsignment",
        "parameters": [
          {
            "name": "consignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the consignment to be deleted"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "status": "success"
              }
            },
            "schema": {
              "type": "object",
              "description": "Status description.",
              "properties": {
                "status": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/consignment_product": {
      "get": {
        "description": "**DEPRECATED** This endpoint has a 2.0 equivalent. We recommend using that instead.\nReturns a paginated list of consignment products.",
        "summary": "List consignment products",
        "tags": [
          "Consignment Products"
        ],
        "operationId": "ListConsignmentProducts",
        "parameters": [
          {
            "name": "consignment_id",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "The ID of a consignment to filter the items for. Shouldn't be used together with the `product_id` parameter."
          },
          {
            "name": "product_id",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "The ID of a product to filter the items for. Shouldn't be used together with the `consignment_id` parameter."
          },
          {
            "in": "query",
            "name": "page",
            "type": "number",
            "description": "The number of the page of results to be returned."
          },
          {
            "in": "query",
            "name": "page_size",
            "type": "number",
            "description": "The size of the page of results to be returned."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConsignmentProductCollection"
            }
          }
        }
      },
      "post": {
        "description": "Adds a new product to a consignment.",
        "summary": "Create a consignment product",
        "tags": [
          "Consignment Products"
        ],
        "operationId": "NewConsignmentProduct",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "New consignment product object.",
            "schema": {
              "$ref": "#/definitions/ConsignmentProductBase"
            },
            "x-examples": {
              "application/json": {
                "consignment_id": "0af7b240-ab83-11e7-eddc-35e7dc9d25d0",
                "product_id": "0af7b240-ab83-11e7-eddc-35e81b24d85f",
                "count": 42,
                "received": null,
                "cost": 123.345,
                "sequence_number": 0
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConsignmentProduct"
            },
            "examples": {
              "application/json": {
                "id": "0af7b240-ab83-11e7-eddc-35e882a295ee",
                "consignment_id": "0af7b240-ab83-11e7-eddc-35e7dc9d25d0",
                "product_id": "0af7b240-ab83-11e7-eddc-35e81b24d85f",
                "count": 42,
                "received": null,
                "cost": 123.345,
                "sequence_number": 0
              }
            }
          }
        }
      }
    },
    "/consignment_product/{consignment_product_id}": {
      "get": {
        "description": "**DEPRECATED** This endpoint has a 2.0 equivalent. We recommend using that instead.\nReturns a single consignment product.",
        "summary": "Get a single consignment product by ID",
        "tags": [
          "Consignment Products"
        ],
        "operationId": "GetConsignmentProductByID",
        "parameters": [
          {
            "name": "consignment_product_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "The ID of the consignment to get."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Consignment"
            }
          }
        }
      },
      "put": {
        "description": "Updates an existing consignment product.",
        "summary": "Update a consignment product",
        "tags": [
          "Consignment Products"
        ],
        "operationId": "UpdateConsignmentProduct",
        "parameters": [
          {
            "name": "consignment_product_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "The ID of the consignment to be updated."
          },
          {
            "name": "consignment",
            "in": "body",
            "required": true,
            "description": "A new or updated consignment object.",
            "schema": {
              "$ref": "#/definitions/ConsignmentProductBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConsignmentProduct"
            }
          }
        }
      },
      "delete": {
        "description": "**DEPRECATED** This endpoint has a 2.0 equivalent. We recommend using that instead.\nDeletes an item from the consignment.",
        "summary": "Delete a consignment product",
        "tags": [
          "Consignment Products"
        ],
        "operationId": "DeleteConsignmentProduct",
        "parameters": [
          {
            "name": "consignment_product_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the consignment product to be deleted."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/customers": {
      "get": {
        "description": "**DEPRECATED** This endpoint has a 2.0 equivalent. We recommend using that instead.\nReturns a paginated list of customers.",
        "summary": "List customers",
        "tags": [
          "Customers"
        ],
        "operationId": "ListCustomers",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uuid",
            "description": "If included, searches for customers with the given unique ID. The id option cannot be used with the `code` or `email` options."
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If included, searches for customers with the given customer code. The code option cannot be used with id or email options."
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If included, searches for customers with the given email address. This is an exact match search. The email option cannot be used with the id or code options."
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time",
            "description": "If included, returns only items modified since the given time. The provided date and time should be in **UTC** and formatted according to **ISO 8601**."
          },
          {
            "in": "query",
            "name": "page",
            "type": "number",
            "description": "The number of the page of results to be returned."
          },
          {
            "in": "query",
            "name": "page_size",
            "type": "number",
            "description": "The size of the page of results to be returned."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomerCollection"
            }
          }
        }
      },
      "post": {
        "description": "**DEPRECATED** This endpoint has a 2.0 equivalent. We recommend using that instead.\nReturns a single new or updated customer object.",
        "summary": "Create or update a customer",
        "tags": [
          "Customers"
        ],
        "operationId": "CreateUpdateCustomer",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "New or updated customer attributes",
            "schema": {
              "$ref": "#/definitions/CustomerUpdateBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomerResponse"
            }
          }
        }
      }
    },
    "/outlets": {
      "get": {
        "description": "**DEPRECATED** This endpoint has a 2.0 equivalent. We recommend using that instead.\nReturns a non-paginated list of outlets.",
        "summary": "List outlets",
        "tags": [
          "Outlets"
        ],
        "operationId": "ListOutlets",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OutletCollection"
            }
          }
        }
      }
    },
    "/payment_types": {
      "get": {
        "description": "**DEPRECATED** This endpoint has a 2.0 equivalent. We recommend using that instead.\nReturns a non-paginated list of payment types.",
        "summary": "List payment types",
        "tags": [
          "Payment Types"
        ],
        "operationId": "ListPaymentTypes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PaymentTypeCollection"
            }
          }
        }
      }
    },
    "/products": {
      "get": {
        "description": "**DEPRECATED** This endpoint has a 2.0 equivalent. We recommend using that instead.\nReturns a paginated list of products.",
        "summary": "List products",
        "tags": [
          "Products"
        ],
        "operationId": "ListProducts",
        "parameters": [
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "id",
              "name",
              "updated_at",
              "sequence_id"
            ],
            "description": "Defines the attribute by which the query results should be ordered. One of: `id`(recommended), `updated_at`(default), name."
          },
          {
            "name": "order_direction",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selects the order direction of the results returned. On of `ASC`(default), `DESC`."
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time",
            "description": "If included, returns only items modified since the given time. The provided date and time should be in **UTC** and formatted according to **ISO 8601**."
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If included, only active or inactive products will be returned. One of: '\"0\"' or '\"1\"'."
          },
          {
            "name": "sku",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If included, only the product with given sku will be returned. It may happen that there will be more products with the same sku. In this case all of them will be returned."
          },
          {
            "name": "handle",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If included, only products with given handle will be returned. This is useful for filtering all variants of a product, since all variants share the same handle."
          },
          {
            "in": "query",
            "name": "page",
            "type": "number",
            "description": "The number of the page of results to be returned."
          },
          {
            "in": "query",
            "name": "page_size",
            "type": "number",
            "description": "The size of the page of results to be returned."
          },
          {
            "in": "query",
            "name": "deleted",
            "type": "boolean",
            "description": "Indicates whether deleted items should be included in the result."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductCollection"
            }
          }
        }
      },
      "post": {
        "description": "Returns a single new or updated product object.",
        "summary": "Create or update a product",
        "tags": [
          "Products"
        ],
        "operationId": "CreateUpdateProduct",
        "parameters": [
          {
            "name": "product",
            "in": "body",
            "required": true,
            "description": "New or updated product object.",
            "schema": {
              "$ref": "#/definitions/ProductUpdateBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductResponse"
            }
          }
        }
      }
    },
    "/products/{product_id}": {
      "get": {
        "description": "**DEPRECATED** This endpoint has a 2.0 equivalent. We recommend using that instead.\nReturns an array with a single product inside it.",
        "summary": "Get a single product by ID",
        "tags": [
          "Products"
        ],
        "operationId": "GetProductByID",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "An ID of an existing product."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductCollection"
            }
          }
        }
      },
      "delete": {
        "description": "Deleted a product by ID.",
        "summary": "Delete a product",
        "tags": [
          "Products"
        ],
        "operationId": "DeleteProduct",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the product to be deleted."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/register_sales": {
      "get": {
        "description": "**DEPRECATED** This endpoint has a 2.0 equivalent. We recommend using that instead.\nReturns a paginated list of register sales.",
        "summary": "List register sales",
        "tags": [
          "Register sales"
        ],
        "operationId": "ListRegisterSales",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time",
            "description": "If included, returns only items modified since the given time. The provided date and time should be in **UTC** and formatted according to **ISO 8601**."
          },
          {
            "name": "outlet_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uuid",
            "description": "If included, returns only register sales made for the given outlet, identified by ID."
          },
          {
            "name": "status[]",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If included, returns only register sales in the given state. The status[] parameter may be used more than once; returned sales will be in any of the specified states."
          },
          {
            "in": "query",
            "name": "page",
            "type": "number",
            "description": "The number of the page of results to be returned."
          },
          {
            "in": "query",
            "name": "page_size",
            "type": "number",
            "description": "The size of the page of results to be returned."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RegisterSaleCollection"
            }
          }
        }
      },
      "post": {
        "description": "Returns a single new or updated product object.",
        "summary": "Create or update a register sale",
        "tags": [
          "Register sales"
        ],
        "operationId": "CreateUpdateRegisterSale",
        "parameters": [
          {
            "name": "register_sale",
            "in": "body",
            "required": true,
            "description": "New or updated register sale object.",
            "schema": {
              "$ref": "#/definitions/RegisterSaleUpdateBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RegisterSaleResponse"
            }
          }
        }
      }
    },
    "/register_sales/{sale_id}": {
      "get": {
        "description": "**DEPRECATED** This endpoint has a 2.0 equivalent. We recommend using that instead.\nReturns a single register sale with the given ID, in an array.",
        "summary": "Get a single register sale by ID",
        "tags": [
          "Register sales"
        ],
        "operationId": "GetRegisterSaleByID",
        "parameters": [
          {
            "name": "sale_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "An ID of an existing sale"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RegisterSaleCollection"
            }
          }
        }
      }
    },
    "/registers": {
      "get": {
        "description": "**DEPRECATED** This endpoint has a 2.0 equivalent. We recommend using that instead.\nReturns a non-paginated list of registers.",
        "summary": "List registers",
        "tags": [
          "Registers"
        ],
        "operationId": "ListRegisters",
        "parameters": [
          {
            "in": "query",
            "name": "deleted",
            "type": "boolean",
            "description": "Indicates whether deleted items should be included in the result."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RegisterCollection"
            }
          }
        }
      }
    },
    "/supplier": {
      "get": {
        "description": "**DEPRECATED** This endpoint has a 2.0 equivalent. We recommend using that instead.\nReturns a paginated list of suppliers.",
        "summary": "List suppliers",
        "tags": [
          "Suppliers"
        ],
        "operationId": "ListSuppliers",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "type": "number",
            "description": "The number of the page of results to be returned."
          },
          {
            "in": "query",
            "name": "page_size",
            "type": "number",
            "description": "The size of the page of results to be returned."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SupplierCollection"
            }
          }
        }
      },
      "post": {
        "description": "Returns a single supplier object.",
        "summary": "Create or update a supplier",
        "tags": [
          "Suppliers"
        ],
        "operationId": "CreateUpdateSupplier",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "New or updated supplier attributes",
            "schema": {
              "$ref": "#/definitions/SupplierUpdateBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Supplier"
            }
          }
        }
      }
    },
    "/supplier/{supplier_id}": {
      "get": {
        "description": "**DEPRECATED** This endpoint has a 2.0 equivalent. We recommend using that instead.\nReturns a single supplier with the given ID.",
        "summary": "Get a single supplier by ID",
        "tags": [
          "Suppliers"
        ],
        "operationId": "GetSupplierByID",
        "parameters": [
          {
            "name": "supplier_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "An ID of an existing supplier object"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Supplier"
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a single supplier by ID.",
        "summary": "Delete a supplier",
        "tags": [
          "Suppliers"
        ],
        "operationId": "DeleteSupplier",
        "parameters": [
          {
            "name": "supplier_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "The ID of the supplier to be deleted."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/taxes": {
      "get": {
        "description": "**DEPRECATED** This endpoint has a 2.0 equivalent. We recommend using that instead.\nReturns a non-paginated list of taxes.",
        "summary": "List taxes",
        "tags": [
          "Taxes"
        ],
        "operationId": "ListTaxes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TaxCollection"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new tax.",
        "summary": "Create a tax",
        "tags": [
          "Taxes"
        ],
        "operationId": "CreateTax",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "New tax attributes.",
            "schema": {
              "$ref": "#/definitions/TaxBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TaxResponse"
            }
          }
        }
      }
    },
    "/taxes/{tax_id}": {
      "get": {
        "description": "Returns a single tax with the given ID.",
        "summary": "Get a single tax by ID",
        "tags": [
          "Taxes"
        ],
        "operationId": "GetTaxByID",
        "parameters": [
          {
            "name": "tax_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "An ID of an existing tax object."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TaxResponse"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "description": "**DEPRECATED** This endpoint has a 2.0 equivalent. We recommend using that instead.\nReturns a non-paginated list of users.",
        "summary": "List users",
        "tags": [
          "Users"
        ],
        "operationId": "ListUsers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserCollection"
            }
          }
        }
      }
    },
    "/webhooks": {
      "get": {
        "description": "Returns a list of webhooks.  *__NOTE:__ This endpoint will only return webhooks created by the application which is making the request.*",
        "summary": "List webhooks",
        "tags": [
          "Webhooks"
        ],
        "operationId": "ListWebhooks",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Webhook"
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates and returns a new webhook.\n__NOTE:__ The `Content-Type` header for this request should be set to `application/x-www-form-urlencoded`.",
        "summary": "Create a webhook",
        "tags": [
          "Webhooks"
        ],
        "operationId": "CreateWebhook",
        "parameters": [
          {
            "in": "formData",
            "name": "data",
            "type": "string",
            "description": "The value of this field should be set as a string representing a JSON payload like:\n`{\"url\":\"http://123456.ngrok.io\",\"active\":true,\"type\":\"product.update\"}`",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Webhook"
            },
            "examples": {
              "application/json": {
                "id": "0af7b240-ab83-11e7-eddc-7311972c4cab",
                "retailer_id": "b1c50056-f019-11e3-a0f5-b8ca3a64f8f4",
                "user_id": "bc305bf6-6183-11e4-f15a-190c6647efc2",
                "url": "https://12345678.ngrok.io",
                "active": true,
                "type": "product.update"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ]
      }
    },
    "/webhooks/{webhook_id}": {
      "get": {
        "description": "Returns a single webhooks with the given ID.",
        "summary": "Get a single webhook by ID",
        "tags": [
          "Webhooks"
        ],
        "operationId": "GetWebhookByID",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          }
        }
      },
      "put": {
        "description": "Updates a webhook with the given `id`.\n__NOTE:__ The `Content-Type` header for this request should be set to `application/x-www-form-urlencoded`.",
        "summary": "Update a webhook by ID",
        "tags": [
          "Webhooks"
        ],
        "operationId": "UpdateWebhook",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "The ID of the webhook to be updated."
          },
          {
            "in": "formData",
            "name": "data",
            "type": "string",
            "description": "The value of this field should be set as a string representing a JSON payload like:\n`{\"active\":false}`",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Webhook"
            },
            "examples": {
              "application/json": {
                "id": "0af7b240-ab83-11e7-eddc-730fe466aba3",
                "retailer_id": "b1c50056-f019-11e3-a0f5-b8ca3a64f8f4",
                "user_id": "bc305bf6-6183-11e4-f15a-190c6647efc2",
                "url": "https://12345678.ngrok.io",
                "active": false,
                "type": "product.update"
              }
            }
          }
        },
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "description": "Deletes the webhook with the given ID.",
        "summary": "Delete a webhook by ID",
        "tags": [
          "Webhooks"
        ],
        "operationId": "DeleteWebhook",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WebhookDeleteSuccess"
            },
            "examples": {
              "application/json": {
                "status": "success"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    }
  },
  "definitions": {
    "Consignment": {
      "title": "Consignment",
      "description": "Consignment object",
      "type": "object",
      "properties": {
        "id": {
          "description": "Auto-generated object ID",
          "type": "string"
        },
        "retailer_id": {
          "description": "The ID of the retailer associated with this consignment.",
          "type": "string"
        },
        "name": {
          "description": "The name of the consignment.",
          "type": "string"
        },
        "consignment_date": {
          "description": "The date when the consignment was created.",
          "type": "string"
        },
        "due_at": {
          "description": "The due date for the consignment.",
          "type": "string"
        },
        "received_at": {
          "description": "The date when the consignment was received.",
          "type": "string"
        },
        "outlet_id": {
          "description": "The ID of the outlet to which the goods are coming.",
          "type": "string",
          "format": "uuid"
        },
        "supplier_id": {
          "description": "The ID of the supplier associated with this consignment.",
          "type": "string",
          "format": "uuid"
        },
        "source_outlet_id": {
          "description": "The ID of the outlet from which the goods are coming. Only used for stock transfers.",
          "type": "string",
          "format": "uuid"
        },
        "status": {
          "description": "Status of the consignment. One of: `OPEN`, `SENT`, `RECEIVED`, `CANCELLED`,  `STOCKTAKE`, `STOCKTAKE_COMPLETE`.",
          "type": "string"
        },
        "type": {
          "description": "The type of the consignment. One of:  `SUPPLIER`, `OUTLET`, `STOCKTAKE`.",
          "type": "string"
        },
        "accounts_transaction_id": {
          "description": "The ID of a transaction in an external system associated with this consignment.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "outlet_id",
        "status",
        "type"
      ]
    },
    "ConsignmentBase": {
      "title": "Consignment Base",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the consignment.",
          "type": "string"
        },
        "consignment_date": {
          "description": "The date when the consignment was created.",
          "type": "string"
        },
        "due_at": {
          "description": "The due date for the consignment.",
          "type": "string"
        },
        "received_at": {
          "description": "The date when the consignment was received.",
          "type": "string"
        },
        "outlet_id": {
          "description": "The ID of the outlet to which the goods are coming.",
          "type": "string",
          "format": "uuid"
        },
        "supplier_id": {
          "description": "The ID of the supplier associated with this consignment.",
          "type": "string",
          "format": "uuid"
        },
        "source_outlet_id": {
          "description": "The ID of the outlet from which the goods are coming. Only used for stock transfers.",
          "type": "string",
          "format": "uuid"
        },
        "status": {
          "description": "Status of the consignment. One of: `OPEN`, `SENT`, `RECEIVED`, `CANCELLED`,  `STOCKTAKE`, `STOCKTAKE_COMPLETE`.",
          "type": "string"
        },
        "type": {
          "description": "The type of the consignment. One of:  `SUPPLIER`, `OUTLET`, `STOCKTAKE`.",
          "type": "string"
        },
        "accounts_transaction_id": {
          "description": "The ID of a transaction in an external system associated with this consignment.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "outlet_id",
        "status",
        "type"
      ]
    },
    "ConsignmentCollection": {
      "title": "Consignment Collection",
      "description": "A collection of consignments with an optional pagination object.",
      "type": "object",
      "properties": {
        "consignments": {
          "description": "An array of consignment objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Consignment"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination"
        }
      }
    },
    "ConsignmentProduct": {
      "title": "Consignment Product",
      "type": "object",
      "properties": {
        "id": {
          "description": "Auto-generated object ID",
          "type": "string",
          "format": "uuid"
        },
        "consignment_id": {
          "description": "The ID of the consignment associated with this item.",
          "type": "string",
          "format": "uuid"
        },
        "product_id": {
          "description": "The ID of the product associated with this item.",
          "type": "string",
          "format": "uuid"
        },
        "count": {
          "description": "Quantity \"ordered\" for stock orders or \"expected\" for stock takes.",
          "type": "integer",
          "format": "int32"
        },
        "received": {
          "description": "Quantity \"received\" for stock orders or \"counted\" for stock takes.",
          "type": "integer",
          "format": "int32"
        },
        "cost": {
          "description": "Supply cost of the item for this consignment.",
          "type": "integer",
          "format": "int32"
        },
        "sequence_number": {
          "description": "Sequence order number for the item.",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "consignment_id",
        "product_id",
        "count"
      ]
    },
    "ConsignmentProductBase": {
      "title": "Consignment Product Base",
      "type": "object",
      "properties": {
        "consignment_id": {
          "description": "The ID of the consignment associated with this item.",
          "type": "string",
          "format": "uuid"
        },
        "product_id": {
          "description": "The ID of the product associated with this item.",
          "type": "string",
          "format": "uuid"
        },
        "count": {
          "description": "Quantity \"ordered\" for stock orders or \"expected\" for stock takes.",
          "type": "integer",
          "format": "int32"
        },
        "received": {
          "description": "Quantity \"received\" for stock orders or \"counted\" for stock takes.",
          "type": "integer",
          "format": "int32"
        },
        "cost": {
          "description": "Supply cost of the item for this consignment.",
          "type": "integer",
          "format": "int32"
        },
        "sequence_number": {
          "description": "Sequence order number for the item.",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "consignment_id",
        "product_id",
        "count"
      ]
    },
    "ConsignmentProductCollection": {
      "title": "Consignment Product Collection",
      "description": "A collection of consignment products with an optional pagination object.",
      "type": "object",
      "properties": {
        "consignment_products": {
          "description": "An array of consignment product objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConsignmentProduct"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination"
        }
      }
    },
    "Customer": {
      "title": "Customer",
      "description": "Customer object",
      "type": "object",
      "properties": {
        "id": {
          "description": "Auto-generated object ID.",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "Full customer name. Modified via first name and last name.",
          "type": "string"
        },
        "customer_group_name": {
          "description": "The name of the customer group this customer is associated with.",
          "type": "string"
        },
        "loyalty_balance": {
          "description": "Customer's current loyalty balance.",
          "type": "string"
        },
        "updated_at": {
          "description": "Last update timestamp.",
          "type": "string"
        },
        "deleted_at": {
          "description": "Deletion timestamp.",
          "type": "string"
        },
        "balance": {
          "description": "Customer's owing balance.",
          "type": "string"
        },
        "year_to_date": {
          "description": "Customer's total spending this year.",
          "type": "string"
        },
        "contact": {
          "$ref": "#/definitions/CustomerContact"
        },
        "customer_code": {
          "description": "Short, unique customer code.",
          "type": "string"
        },
        "customer_group_id": {
          "description": "The ID of the customer group this customer is associated with.",
          "type": "string",
          "format": "uuid"
        },
        "first_name": {
          "description": "Customer's first name.",
          "type": "string"
        },
        "last_name": {
          "description": "Customer's last name.",
          "type": "string"
        },
        "company_name": {
          "description": "Customer's company name.",
          "type": "string"
        },
        "phone": {
          "description": "Customer's phone number.",
          "type": "string"
        },
        "mobile": {
          "description": "Customer's mobile phone number.",
          "type": "string"
        },
        "fax": {
          "description": "Customer's fax number.",
          "type": "string"
        },
        "email": {
          "description": "Customer's email address.",
          "type": "string"
        },
        "twitter": {
          "description": "Twitter handle.",
          "type": "string"
        },
        "website": {
          "description": "Website URL.",
          "type": "string"
        },
        "physical_address1": {
          "description": "Address, line 1 - physical.",
          "type": "string"
        },
        "physical_address2": {
          "description": "Address, line 2 - physical.",
          "type": "string"
        },
        "physical_suburb": {
          "description": "Suburb - physical.",
          "type": "string"
        },
        "physical_city": {
          "description": "City - physical.",
          "type": "string"
        },
        "physical_postcode": {
          "description": "Post code - physical.",
          "type": "string"
        },
        "physical_state": {
          "description": "State - physical.",
          "type": "string"
        },
        "physical_country_id": {
          "description": "Country code - physical.",
          "type": "string"
        },
        "postal_address1": {
          "description": "Address, line 1 - postal.",
          "type": "string"
        },
        "postal_address2": {
          "description": "Address, line 2 - postal.",
          "type": "string"
        },
        "postal_suburb": {
          "description": "Suburb - postal.",
          "type": "string"
        },
        "postal_city": {
          "description": "City - postal.",
          "type": "string"
        },
        "postal_postcode": {
          "description": "Post code - postal.",
          "type": "string"
        },
        "postal_state": {
          "description": "State - postal.",
          "type": "string"
        },
        "postal_country_id": {
          "description": "Country code - postal.",
          "type": "string"
        },
        "enable_loyalty": {
          "description": "Indicates whether customer's purchases should incur loyalty. `0` or `1`.",
          "type": "integer",
          "format": "int32"
        },
        "date_of_birth": {
          "description": "Customer's date of birth.",
          "type": "string"
        },
        "sex": {
          "description": "Customer's gender.",
          "type": "string"
        },
        "custom_field_1": {
          "description": "Custom field 1, able to store any data as a string.",
          "type": "string"
        },
        "custom_field_2": {
          "description": "Custom field 2, able to store any data as a string.",
          "type": "string"
        },
        "custom_field_3": {
          "description": "Custom field 3, able to store any data as a string.",
          "type": "string"
        },
        "custom_field_4": {
          "description": "Custom field 4, able to store any data as a string.",
          "type": "string"
        },
        "note": {
          "description": "Customer related notes.",
          "type": "string"
        }
      },
      "required": [
        "first_name",
        "last_name"
      ]
    },
    "CustomerCollection": {
      "title": "Customer Collection",
      "description": "A collection of customers with an optional pagination object",
      "type": "object",
      "properties": {
        "customers": {
          "description": "An array of customer objects",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Customer"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination"
        }
      }
    },
    "CustomerContact": {
      "title": "Customer Contact",
      "description": "",
      "type": "object",
      "properties": {
        "company_name": {
          "description": "Customer's company name.",
          "type": "string"
        },
        "phone": {
          "description": "Customer's phone number.",
          "type": "string"
        },
        "email": {
          "description": "Customer's email address.",
          "type": "string"
        }
      }
    },
    "CustomerResponse": {
      "title": "Customer Response",
      "description": "A response containing a single customer object",
      "type": "object",
      "properties": {
        "customer": {
          "$ref": "#/definitions/Customer"
        }
      },
      "required": [
        "customer"
      ]
    },
    "CustomerUpdateBase": {
      "title": "Customer Update Base",
      "type": "object",
      "properties": {
        "id": {
          "description": "Existing customer ID. If included in the POST request it will cause an update instead of a creating a new customer.",
          "type": "string",
          "format": "uuid"
        },
        "customer_code": {
          "description": "Short, unique customer code.",
          "type": "string"
        },
        "customer_group_id": {
          "description": "The ID of the customer group this customer is associated with.",
          "type": "string",
          "format": "uuid"
        },
        "first_name": {
          "description": "Customer's first name.",
          "type": "string"
        },
        "last_name": {
          "description": "Customer's last name.",
          "type": "string"
        },
        "company_name": {
          "description": "Customer's company name.",
          "type": "string"
        },
        "phone": {
          "description": "Customer's phone number.",
          "type": "string"
        },
        "mobile": {
          "description": "Customer's mobile phone number.",
          "type": "string"
        },
        "fax": {
          "description": "Customer's fax number.",
          "type": "string"
        },
        "email": {
          "description": "Customer's email address.",
          "type": "string"
        },
        "twitter": {
          "description": "Twitter handle.",
          "type": "string"
        },
        "website": {
          "description": "Website URL.",
          "type": "string"
        },
        "physical_address1": {
          "description": "Address, line 1 - physical.",
          "type": "string"
        },
        "physical_address2": {
          "description": "Address, line 2 - physical.",
          "type": "string"
        },
        "physical_suburb": {
          "description": "Suburb - physical.",
          "type": "string"
        },
        "physical_city": {
          "description": "City - physical.",
          "type": "string"
        },
        "physical_postcode": {
          "description": "Post code - physical.",
          "type": "string"
        },
        "physical_state": {
          "description": "State - physical.",
          "type": "string"
        },
        "physical_country_id": {
          "description": "Country code - physical.",
          "type": "string"
        },
        "postal_address1": {
          "description": "Address, line 1 - postal.",
          "type": "string"
        },
        "postal_address2": {
          "description": "Address, line 2 - postal.",
          "type": "string"
        },
        "postal_suburb": {
          "description": "Suburb - postal.",
          "type": "string"
        },
        "postal_city": {
          "description": "City - postal.",
          "type": "string"
        },
        "postal_postcode": {
          "description": "Post code - postal.",
          "type": "string"
        },
        "postal_state": {
          "description": "State - postal.",
          "type": "string"
        },
        "postal_country_id": {
          "description": "Country code - postal.",
          "type": "string"
        },
        "enable_loyalty": {
          "description": "Indicates whether customer's purchases should incur loyalty. `0` or `1`.",
          "type": "integer",
          "format": "int32"
        },
        "date_of_birth": {
          "description": "Customer's date of birth.",
          "type": "string"
        },
        "sex": {
          "description": "Customer's gender.",
          "type": "string"
        },
        "custom_field_1": {
          "description": "Custom field 1, able to store any data as a string.",
          "type": "string"
        },
        "custom_field_2": {
          "description": "Custom field 2, able to store any data as a string.",
          "type": "string"
        },
        "custom_field_3": {
          "description": "Custom field 3, able to store any data as a string.",
          "type": "string"
        },
        "custom_field_4": {
          "description": "Custom field 4, able to store any data as a string.",
          "type": "string"
        },
        "note": {
          "description": "Customer related notes.",
          "type": "string"
        }
      }
    },
    "GenericContact": {
      "title": "Generic Contact",
      "description": "Generic contact object embedded in other objects like outlet or supplier",
      "type": "object",
      "properties": {
        "first_name": {
          "description": "Contact's first name.",
          "type": "string"
        },
        "last_name": {
          "description": "Contact's last name.",
          "type": "string"
        },
        "company_name": {
          "description": "Contact's company name.",
          "type": "string"
        },
        "phone": {
          "description": "Contact's phone number.",
          "type": "string"
        },
        "mobile": {
          "description": "Contact's mobile phone number",
          "type": "string"
        },
        "fax": {
          "description": "Contact's fax number.",
          "type": "string"
        },
        "email": {
          "description": "Contact's email address.",
          "type": "string"
        },
        "twitter": {
          "description": "Contact's Twitter handle.",
          "type": "string"
        },
        "website": {
          "description": "The URL of the contact's website.",
          "type": "string"
        },
        "physical_address1": {
          "description": "Address, line 1 - physical.",
          "type": "string"
        },
        "physical_address2": {
          "description": "Address, line 2 - physical.",
          "type": "string"
        },
        "physical_suburb": {
          "description": "Suburb - physical.",
          "type": "string"
        },
        "physical_city": {
          "description": "City - physical.",
          "type": "string"
        },
        "physical_postcode": {
          "description": "Post code - physical.",
          "type": "string"
        },
        "physical_state": {
          "description": "State - physical.",
          "type": "string"
        },
        "physical_country_id": {
          "description": "Country code - physical.",
          "type": "string"
        },
        "postal_address1": {
          "description": "Address, line 1 - postal.",
          "type": "string"
        },
        "postal_address2": {
          "description": "Address, line 2 - postal.",
          "type": "string"
        },
        "postal_suburb": {
          "description": "Suburb - postal.",
          "type": "string"
        },
        "postal_city": {
          "description": "City - postal",
          "type": "string"
        },
        "postal_postcode": {
          "description": "Post code - postal.",
          "type": "string"
        },
        "postal_state": {
          "description": "State - postal.",
          "type": "string"
        },
        "postal_country_id": {
          "description": "Country code - postal.",
          "type": "string"
        }
      }
    },
    "InventoryRecord": {
      "title": "Inventory Record",
      "description": "",
      "type": "object",
      "properties": {
        "outlet_id": {
          "description": "The ID of an outlet associated with this inventory record.",
          "type": "string",
          "format": "uuid"
        },
        "outlet_name": {
          "description": "The name of the outlet.",
          "type": "string"
        },
        "count": {
          "description": "Current stock quantity of the product at the given outlet.",
          "type": "integer",
          "format": "int32"
        },
        "reorder_point": {
          "description": "Quantity below which the product should be included in the auto-filled stock orders.",
          "type": "integer",
          "format": "int32"
        },
        "restock_level": {
          "description": "The default of the quantity for auto-filled stock orders",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "outlet_id",
        "count"
      ]
    },
    "Links": {
      "title": "Links",
      "type": "object",
      "properties": {
        "original": {
          "description": "The URL of the product image in the original size (max 2000px).",
          "type": "string"
        },
        "standard": {
          "description": "The URL of the product image in the standard size.",
          "type": "string"
        },
        "thumb": {
          "description": "The URL of the product image in the thumbnail size.",
          "type": "string"
        }
      },
      "required": [
        "original",
        "standard",
        "thumb"
      ]
    },
    "Outlet": {
      "title": "Outlet",
      "description": "Outlet object",
      "type": "object",
      "properties": {
        "id": {
          "description": "Auto-generated object ID.",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "Outlet name.",
          "type": "string"
        },
        "time_zone": {
          "description": "Outlet time-zone in **tz database** format like: `Pacific/Auckland`.",
          "type": "string"
        },
        "tax_id": {
          "description": "The ID of the default tax for the outlet.",
          "type": "string",
          "format": "uuid"
        },
        "contact": {
          "$ref": "#/definitions/GenericContact"
        },
        "email": {
          "description": "Email address.",
          "type": "string"
        },
        "physical_address1": {
          "description": "Address, line 1 - physical.",
          "type": "string"
        },
        "physical_address2": {
          "description": "Address, line 2 - physical.",
          "type": "string"
        },
        "physical_suburb": {
          "description": "Suburb - physical.",
          "type": "string"
        },
        "physical_city": {
          "description": "City - physical.",
          "type": "string"
        },
        "physical_postcode": {
          "description": "Post code - physical.",
          "type": "string"
        },
        "physical_state": {
          "description": "State - physical.",
          "type": "string"
        },
        "physical_country_id": {
          "description": "Country code - physical.",
          "type": "string"
        }
      }
    },
    "OutletCollection": {
      "title": "Outlet Collection",
      "description": "A collection of outlets with an optional pagination object",
      "type": "object",
      "properties": {
        "outlets": {
          "description": "An array of outlet objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Outlet"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination"
        }
      }
    },
    "Pagination": {
      "title": "Pagination",
      "description": "Optional pagination object",
      "type": "object",
      "properties": {
        "results": {
          "description": "Total amount of objects matching the query.",
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "description": "Current page.",
          "type": "integer",
          "format": "int32"
        },
        "page_size": {
          "description": "Current page size.",
          "type": "integer",
          "format": "int32"
        },
        "pages": {
          "description": "The total amount of pages to iterate through.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PaymentConfig": {
      "title": "Payment Config",
      "description": "An object containing additional payment configuration attributes",
      "type": "object",
      "properties": {
        "url": {
          "description": "The URL of an external gateway.",
          "type": "string"
        }
      }
    },
    "PaymentType": {
      "title": "Payment Type",
      "description": "Payment Type object",
      "type": "object",
      "properties": {
        "id": {
          "description": "Auto-generated object ID.",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "The name of the payment type.",
          "type": "string"
        },
        "payment_type_id": {
          "description": "**internal** The ID of the global payment type.",
          "type": "integer",
          "format": "int32"
        },
        "config": {
          "$ref": "#/definitions/PaymentConfig"
        }
      }
    },
    "PaymentTypeCollection": {
      "title": "Payment Type Collection",
      "description": "A collection of payment types with an optional pagination object",
      "type": "object",
      "properties": {
        "payment_types": {
          "description": "An array of payment type objects",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentType"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination"
        }
      }
    },
    "PriceBookEntry": {
      "title": "Price Book Entry",
      "type": "object",
      "properties": {
        "id": {
          "description": "Auto-generated object id.",
          "type": "string",
          "format": "uuid"
        },
        "product_id": {
          "description": "ID of the product associated with this record.",
          "type": "string",
          "format": "uuid"
        },
        "price_book_id": {
          "description": "ID of the price book associated with this record.",
          "type": "string",
          "format": "uuid"
        },
        "price_book_name": {
          "description": "The name of the price book associated with this record.",
          "type": "string"
        },
        "type": {
          "description": "Product type for which this price book record should be used.",
          "type": "string"
        },
        "outlet_name": {
          "description": "The name of the outlet for which this price book record should be used.",
          "type": "string"
        },
        "outlet_id": {
          "description": "ID of the outlet for which this price book record should be used.",
          "type": "string",
          "format": "uuid"
        },
        "customer_group_name": {
          "description": "The name of the customer group associated with this record.",
          "type": "string"
        },
        "customer_group_id": {
          "description": "The ID of the customer group associated with this record.",
          "type": "string",
          "format": "uuid"
        },
        "price": {
          "description": "Tax exclusive price of the product.",
          "type": "number",
          "format": "double"
        },
        "loyalty_value": {
          "type": "number",
          "format": "double"
        },
        "tax": {
          "description": "The tax value.",
          "type": "number",
          "format": "double"
        },
        "tax_id": {
          "description": "The ID of the tax associated with this record.",
          "type": "string",
          "format": "uuid"
        },
        "tax_rate": {
          "description": "The tax rate.",
          "type": "number",
          "format": "double"
        },
        "tax_name": {
          "description": "The name of the tax associated with this record.",
          "type": "string"
        },
        "min_units": {
          "description": "Minimum product quantity for which this price book entry will be used.",
          "type": "string"
        },
        "max_units": {
          "description": "Maximum product quantity for which this price book entry will be used.",
          "type": "string"
        },
        "valid_from": {
          "description": "The staring date from which this price book entry is in effect.",
          "type": "string"
        },
        "valid_to": {
          "description": "The end date to which this price book entry is in effect.",
          "type": "string"
        }
      },
      "required": [
        "tax_name"
      ]
    },
    "Product": {
      "title": "Product",
      "description": "Product object",
      "type": "object",
      "properties": {
        "has_variants": {
          "description": "Indicated whether the product has variants.",
          "type": "boolean"
        },
        "variant_parent_id": {
          "description": "The ID of the parent product. Only available of variant children.",
          "type": "string",
          "format": "uuid"
        },
        "base_name": {
          "description": "The root of the product's name as defined by the user in the UI. Doesn't include any variant related suffixes.",
          "type": "string"
        },
        "image": {
          "description": "**DEPRECATED** URL of the product image.",
          "type": "string"
        },
        "image_large": {
          "description": "**DEPRECATED** URL of the large product image.",
          "type": "string"
        },
        "images": {
          "description": "An array of product images.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductImage"
          }
        },
        "price_book_entries": {
          "description": "An array of price book entries associated with the product.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceBookEntry"
          }
        },
        "price": {
          "description": "Tax exclusive default price of the product.",
          "type": "number",
          "format": "double"
        },
        "tax": {
          "description": "The name of the default tax for the product.",
          "type": "number",
          "format": "double"
        },
        "tax_rate": {
          "description": "The default tax rate for the product.",
          "type": "number",
          "format": "double"
        },
        "tax_name": {
          "description": "The name of the default tax for the product.",
          "type": "string"
        },
        "taxes": {
          "description": "An array of product tax objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductTax"
          }
        },
        "updated_at": {
          "description": "The time of the last update for the product.",
          "type": "string"
        },
        "deleted_at": {
          "description": "The time of the product deletion.",
          "type": "string"
        },
        "id": {
          "description": "Auto-generated object ID.",
          "type": "string",
          "format": "uuid"
        },
        "source_id": {
          "description": "The ID that can be used to reference a product in another system.",
          "type": "string"
        },
        "variant_source_id": {
          "description": "Reference ID to an external object. Should be POSTed as `source_variant_id`.",
          "type": "string"
        },
        "handle": {
          "description": "The handle of the product. Creating a new product with a handle identical to one of an existing product will cause creating a variant.",
          "type": "string"
        },
        "type": {
          "description": "The name of the product type associated with the product.",
          "type": "string"
        },
        "variant_option_one_name": {
          "description": "The name of the variant option 1.",
          "type": "string"
        },
        "variant_option_one_value": {
          "description": "The value of the variant option 1.",
          "type": "string"
        },
        "variant_option_two_name": {
          "description": "The name of the variant option 2.",
          "type": "string"
        },
        "variant_option_two_value": {
          "description": "The value of the variant option 2.",
          "type": "string"
        },
        "variant_option_three_name": {
          "description": "The name of the variant option 3.",
          "type": "string"
        },
        "variant_option_three_value": {
          "description": "The value of the variant option 3.",
          "type": "string"
        },
        "active": {
          "description": "Indicates whether the product is currently active.",
          "type": "boolean"
        },
        "name": {
          "description": "The name of the product. Should be posted without any variant related suffixes.",
          "type": "string"
        },
        "description": {
          "description": "The description of the product. May include HTML.",
          "type": "string"
        },
        "sku": {
          "description": "The SKU of the product. Should be unique for new products.",
          "type": "string"
        },
        "tags": {
          "description": "A comma separated list of tags associated with the product.",
          "type": "string"
        },
        "brand_id": {
          "description": "The ID of the brand associated with the product.",
          "type": "string",
          "format": "uuid"
        },
        "supplier_name": {
          "description": "Product supplier's name.",
          "type": "string"
        },
        "supplier_code": {
          "description": "The code of the supplier for the product.",
          "type": "string"
        },
        "supply_price": {
          "description": "The default cost of supply for the product.",
          "type": "string"
        },
        "account_code_purchase": {
          "description": "Code used to associate purchase (cost) of the product with a specific account.",
          "type": "string"
        },
        "account_code_sales": {
          "description": "Code used to associate sales of the product with a specific account. When POSTing it should be delivered as `account_code`.",
          "type": "string"
        },
        "track_inventory": {
          "description": "Indicated whether the system should track inventory count for this product.",
          "type": "boolean"
        },
        "button_order": {
          "description": "A number describing the position of a variant in the UI.",
          "type": "integer",
          "format": "int32"
        },
        "inventory": {
          "description": "A list of inventory records associated with the product.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InventoryRecord"
          }
        },
        "retail_price": {
          "description": "Retail price for the product. Tax inclusive or exclusive depending on the store settings.",
          "type": "number",
          "format": "double"
        },
        "tax_id": {
          "description": "ID of the tax to be used as the default for this product (for inclusive stores).",
          "type": "string",
          "format": "uuid"
        }
      },
      "required": [
        "handle",
        "name",
        "sku",
        "retail_price"
      ]
    },
    "ProductCollection": {
      "title": "Product Collection",
      "description": "A collection of products with an optional pagination object",
      "type": "object",
      "properties": {
        "products": {
          "description": "An array of products.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Product"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination"
        }
      }
    },
    "ProductImage": {
      "title": "Product Image",
      "description": "Product image object",
      "type": "object",
      "properties": {
        "id": {
          "description": "Auto-generated object ID.",
          "type": "string",
          "format": "uuid"
        },
        "links": {
          "$ref": "#/definitions/Links"
        }
      }
    },
    "ProductResponse": {
      "title": "Product Response",
      "description": "A response containing a single product object",
      "type": "object",
      "properties": {
        "product": {
          "$ref": "#/definitions/Product"
        }
      },
      "required": [
        "product"
      ]
    },
    "ProductTax": {
      "title": "Product Tax",
      "description": "An object describing which tax is used for the product in which outlet.",
      "type": "object",
      "properties": {
        "outlet_id": {
          "description": "The ID of the outlet.",
          "type": "string",
          "format": "uuid"
        },
        "tax_id": {
          "description": "The ID of the tax.",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "ProductUpdateBase": {
      "title": "Product Update Base",
      "type": "object",
      "properties": {
        "id": {
          "description": "Existing product ID. If included in the POST request it will cause an update instead of a creating a new object.",
          "type": "string",
          "format": "uuid"
        },
        "source_id": {
          "description": "The ID that can be used to reference a product in another system.",
          "type": "string"
        },
        "source_variant_id": {
          "description": "Reference ID to an external object. Value will be returned as `variant_source_id`.",
          "type": "string"
        },
        "handle": {
          "description": "The handle of the product. Creating a new product with a handle identical to one of an existing product will cause creating a variant.",
          "type": "string"
        },
        "type": {
          "description": "The name of the product type associated with the product.",
          "type": "string"
        },
        "variant_option_one_name": {
          "description": "The name of the variant option 1.",
          "type": "string"
        },
        "variant_option_one_value": {
          "description": "The value of the variant option 1.",
          "type": "string"
        },
        "variant_option_two_name": {
          "description": "The name of the variant option 2.",
          "type": "string"
        },
        "variant_option_two_value": {
          "description": "The value of the variant option 2.",
          "type": "string"
        },
        "variant_option_three_name": {
          "description": "The name of the variant option 3.",
          "type": "string"
        },
        "variant_option_three_value": {
          "description": "The value of the variant option 3.",
          "type": "string"
        },
        "active": {
          "type": "string",
          "description": "Indicates whether the product is currently active.\n**NOTE:** Currently has to be submitted as __\"0\"__ or __\"1\"__. Will be returned as __boolean__ value of `true` or `false`.",
          "enum": [
            "0",
            "1"
          ]
        },
        "name": {
          "description": "The name of the product. Should be posted without any variant related suffixes.",
          "type": "string"
        },
        "description": {
          "description": "The description of the product. May include HTML.",
          "type": "string"
        },
        "sku": {
          "description": "The SKU of the product. Should be unique for new products.",
          "type": "string"
        },
        "tags": {
          "description": "A comma separated list of tags associated with the product.",
          "type": "string"
        },
        "brand_name": {
          "description": "The name of the brand associated with the product.",
          "type": "string"
        },
        "supplier_name": {
          "description": "Product supplier's name.",
          "type": "string"
        },
        "supplier_code": {
          "description": "The code of the supplier for the product.",
          "type": "string"
        },
        "supply_price": {
          "description": "The default cost of supply for the product.",
          "type": "string"
        },
        "account_code_purchase": {
          "description": "Code used to associate purchase (cost) of the product with a specific account.",
          "type": "string"
        },
        "account_code": {
          "description": "Code used to associate sales of the product with a specific account. Value will be returned as `account_code_sales`.",
          "type": "string"
        },
        "track_inventory": {
          "description": "Indicated whether the system should track inventory count for this product.",
          "type": "boolean"
        },
        "button_order": {
          "description": "A number describing the position of a variant in the UI.",
          "type": "integer",
          "format": "int32"
        },
        "inventory": {
          "description": "A list of inventory records associated with the product.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InventoryRecord"
          }
        },
        "retail_price": {
          "description": "Retail price for the product. Tax inclusive or exclusive depending on the store settings.",
          "type": "number",
          "format": "double"
        },
        "tax_id": {
          "description": "ID of the tax to be used as the default for this product (for inclusive stores).",
          "type": "string",
          "format": "uuid"
        }
      },
      "required": [
        "handle",
        "name",
        "sku",
        "retail_price"
      ]
    },
    "Rate": {
      "title": "Rate",
      "description": "Tax rate object",
      "type": "object",
      "properties": {
        "id": {
          "description": "Auto-generated object ID.",
          "type": "string",
          "format": "uuid"
        },
        "rate": {
          "description": "The value of the tax rate. `0.1 = 10%` tax.",
          "type": "number",
          "format": "double"
        },
        "name": {
          "description": "The name of the tax rate.",
          "type": "string"
        }
      }
    },
    "Register": {
      "title": "Register",
      "description": "Register object",
      "type": "object",
      "properties": {
        "id": {
          "description": "Auto-generated object ID.",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "The name of the register.",
          "type": "string"
        },
        "outlet_id": {
          "description": "The ID of the outlet the register is associated with.",
          "type": "string",
          "format": "uuid"
        },
        "button_layout_id": {
          "description": "**internal** The ID of the button layout associated with this register.",
          "type": "string",
          "format": "uuid"
        },
        "print_receipt": {
          "description": "Indicates whether the receipt will be printed after the sale is completed. `\"0\"` or `\"1\"`.",
          "type": "string"
        },
        "email_receipt": {
          "description": "Indicated whether the receipt should be emailed after the sale is completed.  `\"0\"` or `\"1\"`.",
          "type": "string"
        },
        "ask_for_note_on_save": {
          "description": "Indicates whether the user will be asked to enter a note when saving a sale.  `\"0\"` or `\"1\"`.",
          "type": "string"
        },
        "print_note_on_receipt": {
          "description": "Indicates whether the sale note should be printed on the receipt.  `\"0\"` or `\"1\"`.",
          "type": "string"
        },
        "ask_for_user_on_sale": {
          "description": "Indicated whether the user prompt should appear after the sale. `\"0\"` or `\"1\"`.",
          "type": "string"
        },
        "show_discounts_on_receipt": {
          "description": "Indicates whether discounts values should appear on the receipt. `\"0\"` or `\"1\"`.",
          "type": "string"
        },
        "receipt_header": {
          "description": "Content of the receipt header. May contain HTML.",
          "type": "string"
        },
        "receipt_barcoded": {
          "description": "Indicates whether the barcode should be printed on the receipt. `\"0\"` or `\"1\"`.",
          "type": "string"
        },
        "receipt_footer": {
          "description": "Content of the receipt footer. May contain HTML.",
          "type": "string"
        },
        "receipt_style_class": {
          "description": "**internal**",
          "type": "string"
        },
        "invoice_prefix": {
          "description": "Text to be used as prefix of the invoice number.",
          "type": "string"
        },
        "invoice_suffix": {
          "description": "Text to be used as suffix of the invoice number.",
          "type": "string"
        },
        "invoice_sequence": {
          "description": "The numeric part of the last created invoice number.",
          "type": "integer",
          "format": "int32"
        },
        "register_open_count_sequence": {
          "description": "**internal** The number of the current register closure.",
          "type": "string"
        },
        "register_open_sequence_id": {
          "description": "**internal** The ID of the current register closure.",
          "type": "string",
          "format": "uuid"
        },
        "register_open_time": {
          "description": "The time when the register was opened.",
          "type": "string"
        },
        "register_close_time": {
          "description": "Time time when the register was closed. May be blank if the register is currently open.",
          "type": "string"
        },
        "cash_managed_payment_type_id": {
          "description": "**internal** The ID of the payment type used for cash management functionality.",
          "type": "string",
          "format": "uuid"
        },
        "is_quick_keys_enabled": {
          "description": "**internal** Indicated whether the register is using quick keys.",
          "type": "boolean"
        },
        "quick_key_template_id": {
          "description": "**internal** The ID of the quick keys template the register is using.",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "RegisterCollection": {
      "title": "Register Collection",
      "description": "A collection of registers with an optional pagination object",
      "type": "object",
      "properties": {
        "registers": {
          "description": "An array of register objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Register"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination"
        }
      }
    },
    "RegisterSale": {
      "title": "Register Sale",
      "description": "Register sale object",
      "type": "object",
      "properties": {
        "id": {
          "description": "Auto-generated object ID.",
          "type": "string",
          "format": "uuid"
        },
        "source": {
          "description": "**internal** One of `USER` and `SHOPIFY`.",
          "type": "string"
        },
        "customer_name": {
          "description": "The name of the customer associated with the sale.",
          "type": "string"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "user_name": {
          "description": "The username of the user who created the sale.",
          "type": "string"
        },
        "created_at": {
          "description": "The date and time when the sale was created (on the server).",
          "type": "string"
        },
        "updated_at": {
          "description": "The date and time of the last update.",
          "type": "string"
        },
        "total_price": {
          "description": "Total price of the sale.",
          "type": "integer",
          "format": "int32"
        },
        "total_cost": {
          "description": "Total cost of the sale.",
          "type": "number",
          "format": "double"
        },
        "total_tax": {
          "description": "Total tax of the sale.",
          "type": "number",
          "format": "double"
        },
        "tax_name": {
          "description": "Tax tax associated with the sale.",
          "type": "string"
        },
        "return_for": {
          "description": "The ID of another sale if this sale was created as a return.",
          "type": "string"
        },
        "source_id": {
          "description": "The ID of the sale on the client side or another system where the sale was originally created.",
          "type": "string"
        },
        "register_id": {
          "description": "The ID of the register where the sale was created.",
          "type": "string",
          "format": "uuid"
        },
        "customer_id": {
          "description": "The ID of the customer associated with this sale.",
          "type": "string",
          "format": "uuid"
        },
        "user_id": {
          "description": "The ID of the user (cashier) who created the sale.",
          "type": "string",
          "format": "uuid"
        },
        "sale_date": {
          "description": "The date of the sale. If not provided will be added as the time the sale reached the server.",
          "type": "string"
        },
        "note": {
          "description": "A note on the sale entered by the cashier.",
          "type": "string"
        },
        "status": {
          "description": "Status of the sale. One of: `SAVED`, `CLOSED`, `ONACCOUNT`, `LAYBY`, `ONACCOUNT_CLOSED`, `LAYBY_CLOSED`, `VOIDED`.",
          "type": "string"
        },
        "short_code": {
          "description": "Short, unique code to be printed on the receipt for loyalty tracking purposes.",
          "type": "string"
        },
        "invoice_number": {
          "description": "The invoice number for the sale. If left null it will be populated by Vend with the next available invoice number.",
          "type": "string"
        },
        "accounts_transaction_id": {
          "description": "Xero invoice reference ID. Only editable for `ONACCOUNT` sales.",
          "type": "string"
        },
        "register_sale_products": {
          "description": "Line items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegisterSaleProduct"
          }
        },
        "register_sale_payments": {
          "description": "Payments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegisterSalePayment"
          }
        },
        "totals": {
          "$ref": "#/definitions/RegisterSaleTotals"
        },
        "taxes": {
          "description": "Tax components for the sale.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegisterSaleTax"
          }
        }
      }
    },
    "RegisterSaleCollection": {
      "title": "Register Sale Collection",
      "description": "A collection of sales with an optional pagination object",
      "type": "object",
      "properties": {
        "register_sales": {
          "description": "An array of register sale objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegisterSale"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination"
        }
      }
    },
    "RegisterSalePayment": {
      "title": "Register Sale Payment",
      "description": "Register sale payment object",
      "type": "object",
      "properties": {
        "id": {
          "description": "Auto-generated object ID.",
          "type": "string",
          "format": "uuid"
        },
        "register_id": {
          "description": "The ID of the register used to add this payment to the sale.",
          "type": "string",
          "format": "uuid"
        },
        "retailer_payment_type_id": {
          "description": "Payment type id to be used for the payment.",
          "type": "string",
          "format": "uuid"
        },
        "payment_date": {
          "description": "The date and time of the payment.",
          "type": "string"
        },
        "amount": {
          "description": "Payment amount.",
          "type": "number",
          "format": "double"
        },
        "payment_type_id": {
          "description": "**internal** Global payment type ID. Irrelevant for external use.",
          "type": "string"
        },
        "name": {
          "description": "The name of the payment type.",
          "type": "string"
        },
        "label": {
          "description": "The label of the payment type.",
          "type": "string"
        }
      },
      "required": [
        "retailer_payment_type_id",
        "amount"
      ]
    },
    "RegisterSalePaymentUpdateBase": {
      "title": "Register Sale Payment Update Base",
      "type": "object",
      "properties": {
        "id": {
          "description": "Existing payment ID. If included in the POST request it will cause an update instead of a creating a new supplier.",
          "type": "string",
          "format": "uuid"
        },
        "register_id": {
          "description": "The ID of the register used to add this payment to the sale.",
          "type": "string",
          "format": "uuid"
        },
        "retailer_payment_type_id": {
          "description": "Payment type id to be used for the payment.",
          "type": "string",
          "format": "uuid"
        },
        "payment_date": {
          "description": "The date and time of the payment in RFC3339 format.",
          "type": "string"
        },
        "amount": {
          "description": "Payment amount.",
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "retailer_payment_type_id",
        "amount"
      ]
    },
    "RegisterSaleProduct": {
      "title": "Register Sale Product",
      "description": "Register sale product object",
      "type": "object",
      "properties": {
        "id": {
          "description": "Auto-generated object ID.",
          "type": "string",
          "format": "uuid"
        },
        "handle": {
          "description": "The handle of the product associated with this line item.",
          "type": "string"
        },
        "sku": {
          "description": "The SKU of the product associated with this line item.",
          "type": "string"
        },
        "name": {
          "description": "The name of the product associated with this line item.",
          "type": "string"
        },
        "tax_name": {
          "description": "The name of the tax associated with this line item.",
          "type": "string"
        },
        "tax_rate": {
          "description": "The rate of the tax associated with this line item.",
          "type": "number",
          "format": "double"
        },
        "tax_total": {
          "description": "Total tax for this line item. (`tax * quantity`).",
          "type": "number",
          "format": "double"
        },
        "price_total": {
          "description": "Total price for this line item. (`price * quantity`).",
          "type": "number",
          "format": "double"
        },
        "product_id": {
          "description": "The ID of the product associated with this line item.",
          "type": "string",
          "format": "uuid"
        },
        "register_id": {
          "description": "The ID of the register which was used to add this line item to the sale.",
          "type": "string",
          "format": "uuid"
        },
        "sequence": {
          "description": "Order number of the line item.",
          "type": "integer",
          "format": "int32"
        },
        "quantity": {
          "description": "Quantity of products for the line item.",
          "type": "number",
          "format": "double"
        },
        "price": {
          "description": "Unit price of the line item.",
          "type": "number",
          "format": "double"
        },
        "cost": {
          "description": "Unit cost of the line item",
          "type": "number",
          "format": "double"
        },
        "price_set": {
          "description": "Indicated whether the price was \"fixed\". If set to `\"1\"` it prevents recalculation of the total price based on the price from the database. One of `\"0\"` or `\"1\"`.",
          "type": "integer",
          "default": 0,
          "format": "int32"
        },
        "discount": {
          "description": "Discount value of the line item.",
          "type": "integer",
          "format": "int32"
        },
        "loyalty_value": {
          "description": "The value of loyalty that will be incurred by the customer for this line item.",
          "type": "number",
          "format": "double"
        },
        "tax": {
          "description": "The unit tax value associated with this line item.",
          "type": "number",
          "format": "double"
        },
        "tax_id": {
          "description": "The ID of the tax associated with this line item.",
          "type": "string",
          "format": "uuid"
        },
        "status": {
          "description": "If defined as `CONFIRMED` for pending sales, the line item will be added as **read-only**.",
          "type": "string"
        },
        "attributes": {
          "description": "Additional line item attributes.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegisterSaleProductAttribute"
          }
        }
      }
    },
    "RegisterSaleProductAttribute": {
      "title": "Register Sale Product Attribute",
      "type": "object",
      "properties": {
        "name": {
          "description": "Attribute name.",
          "type": "string"
        },
        "value": {
          "description": "Attribute value.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ]
    },
    "RegisterSaleProductUpdateBase": {
      "title": "Register Sale Product Update Base",
      "type": "object",
      "properties": {
        "id": {
          "description": "Existing line item (register sale product) ID. If included in the POST request it will cause an update instead of a creating a new object.",
          "type": "string",
          "format": "uuid"
        },
        "product_id": {
          "description": "The ID of the product associated with this line item.",
          "type": "string",
          "format": "uuid"
        },
        "register_id": {
          "description": "The ID of the register which was used to add this line item to the sale.",
          "type": "string",
          "format": "uuid"
        },
        "sequence": {
          "description": "Order number of the line item.",
          "type": "integer",
          "format": "int32"
        },
        "quantity": {
          "description": "Quantity of products for the line item.",
          "type": "number",
          "format": "double"
        },
        "price": {
          "description": "Unit price of the line item.",
          "type": "number",
          "format": "double"
        },
        "cost": {
          "description": "Unit cost of the line item",
          "type": "number",
          "format": "double"
        },
        "price_set": {
          "description": "Indicated whether the price was \"fixed\". If set to `\"1\"` it prevents recalculation of the total price based on the price from the database. One of `\"0\"` or `\"1\"`.",
          "type": "integer",
          "default": 0,
          "format": "int32"
        },
        "discount": {
          "description": "Discount value of the line item.",
          "type": "integer",
          "format": "int32"
        },
        "loyalty_value": {
          "description": "The value of loyalty that will be incurred by the customer for this line item.",
          "type": "number",
          "format": "double"
        },
        "tax": {
          "description": "The unit tax value associated with this line item.",
          "type": "number",
          "format": "double"
        },
        "tax_id": {
          "description": "The ID of the tax associated with this line item.",
          "type": "string",
          "format": "uuid"
        },
        "status": {
          "description": "If defined as `CONFIRMED` for pending sales, the line item will be added as **read-only**.",
          "type": "string"
        },
        "attributes": {
          "description": "Additional line item attributes.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegisterSaleProductAttribute"
          }
        }
      },
      "required": [
        "product_id",
        "quantity",
        "price",
        "tax",
        "tax_id"
      ]
    },
    "RegisterSaleResponse": {
      "title": "Register Sale Response",
      "description": "A response containing a single sale object",
      "type": "object",
      "properties": {
        "register_sale": {
          "$ref": "#/definitions/RegisterSale"
        }
      },
      "required": [
        "register_sale"
      ]
    },
    "RegisterSaleTax": {
      "title": "Register Sale Tax",
      "type": "object",
      "properties": {
        "id": {
          "description": "Auto-generated object ID.",
          "type": "string",
          "format": "uuid"
        },
        "tax": {
          "description": "The total tax value for this tax.",
          "type": "number",
          "format": "double"
        },
        "name": {
          "description": "The name of the tax.",
          "type": "string"
        },
        "rate": {
          "description": "The rate of the tax. `0.1 = 10%`.",
          "type": "number",
          "format": "double"
        }
      }
    },
    "RegisterSaleTotals": {
      "title": "Register Sale Totals",
      "type": "object",
      "properties": {
        "total_tax": {
          "description": "Total tax value for this sale.",
          "type": "number",
          "format": "double"
        },
        "total_price": {
          "description": "Total price for this sale.",
          "type": "integer",
          "format": "int32"
        },
        "total_payment": {
          "description": "Total payment value for the sale.",
          "type": "number",
          "format": "double"
        },
        "total_to_pay": {
          "description": "Total outstanding payment value.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RegisterSaleUpdateBase": {
      "title": "Register Sale Update Base",
      "description": "Editable attributes of the sale",
      "type": "object",
      "properties": {
        "source_id": {
          "description": "The ID of the sale on the client side or another system where the sale was originally created.",
          "type": "string"
        },
        "register_id": {
          "description": "The ID of the register where the sale was created.",
          "type": "string",
          "format": "uuid"
        },
        "customer_id": {
          "description": "The ID of the customer associated with this sale.",
          "type": "string",
          "format": "uuid"
        },
        "user_id": {
          "description": "The ID of the user (cashier) who created the sale.",
          "type": "string",
          "format": "uuid"
        },
        "sale_date": {
          "description": "The date of the sale in RFC3339 format. If not provided will be added as the time the sale reached the server.",
          "type": "string"
        },
        "note": {
          "description": "A note on the sale entered by the cashier.",
          "type": "string"
        },
        "status": {
          "description": "Status of the sale. One of: `SAVED`, `CLOSED`, `ONACCOUNT`, `LAYBY`, `ONACCOUNT_CLOSED`, `LAYBY_CLOSED`, `VOIDED`.",
          "type": "string"
        },
        "short_code": {
          "description": "Short, unique code to be printed on the receipt for loyalty tracking purposes.",
          "type": "string"
        },
        "invoice_number": {
          "description": "The invoice number for the sale. If left null it will be populated by Vend with the next available invoice number.",
          "type": "string"
        },
        "accounts_transaction_id": {
          "description": "Xero invoice reference ID. Only editable for `ONACCOUNT` sales.",
          "type": "string"
        },
        "register_sale_products": {
          "description": "Line items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegisterSaleProductUpdateBase"
          }
        },
        "register_sale_payments": {
          "description": "Payments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegisterSalePaymentUpdateBase"
          }
        }
      },
      "required": [
        "user_id",
        "status"
      ]
    },
    "Supplier": {
      "title": "Supplier",
      "description": "Supplier object",
      "type": "object",
      "properties": {
        "id": {
          "description": "Auto-generated object ID.",
          "type": "string",
          "format": "uuid"
        },
        "source": {
          "description": "**internal**",
          "type": "string"
        },
        "name": {
          "description": "The name of the supplier.",
          "type": "string"
        },
        "description": {
          "description": "Supplier's description.",
          "type": "string"
        },
        "contact": {
          "$ref": "#/definitions/GenericContact"
        }
      }
    },
    "SupplierCollection": {
      "title": "Supplier Collection",
      "description": "A collection of suppliers with an optional pagination object.",
      "type": "object",
      "properties": {
        "suppliers": {
          "description": "An array of supplier objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Supplier"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination"
        }
      }
    },
    "SupplierUpdateBase": {
      "title": "Supplier Update Base",
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "description": "Existing supplier ID. If included in the POST request it will cause an update instead of a creating a new object.",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "The name of the supplier.",
          "type": "string"
        },
        "description": {
          "description": "Supplier's description.",
          "type": "string"
        },
        "contact": {
          "$ref": "#/definitions/GenericContact"
        }
      }
    },
    "Tax": {
      "title": "Tax",
      "description": "Tax object",
      "type": "object",
      "properties": {
        "default": {
          "description": "Indicates whether the tax is the default tax for the account.",
          "type": "boolean",
          "default": false
        },
        "active": {
          "description": "Indicates whether the tax is active.",
          "type": "boolean",
          "default": true
        },
        "rates": {
          "description": "Tax rates associated with the tax. Always a single rate for tax-inclusive stores.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Rate"
          }
        },
        "id": {
          "description": "Auto-generated object ID.",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "Tax name.",
          "type": "string"
        },
        "rate": {
          "description": "Tax rate. `0.1 = 10%`.",
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "name",
        "rate"
      ]
    },
    "TaxBase": {
      "title": "Tax Base",
      "description": "Tax attributes used to create a new tax",
      "type": "object",
      "properties": {
        "name": {
          "description": "Tax name.",
          "type": "string"
        },
        "rate": {
          "description": "Tax rate. `0.1 = 10%`.",
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "name",
        "rate"
      ]
    },
    "TaxCollection": {
      "title": "Tax Collection",
      "description": "A collection of taxes with an optional pagination object",
      "type": "object",
      "properties": {
        "taxes": {
          "description": "An array of tax objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tax"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination"
        }
      }
    },
    "TaxResponse": {
      "title": "Tax Response",
      "description": "A response containing a single tax object",
      "type": "object",
      "properties": {
        "tax": {
          "$ref": "#/definitions/Tax"
        }
      },
      "required": [
        "tax"
      ]
    },
    "User": {
      "title": "User",
      "description": "User object",
      "type": "object",
      "properties": {
        "id": {
          "description": "Auto-generated object ID.",
          "type": "string",
          "format": "uuid"
        },
        "username": {
          "description": "The username used to log into Vend.",
          "type": "string"
        },
        "name": {
          "description": "The display name used in the application.",
          "type": "string"
        },
        "email": {
          "description": "User's email address.",
          "type": "string"
        },
        "outlet_id": {
          "description": "**DEPRECATED** Not used.",
          "type": "string",
          "format": "uuid"
        },
        "outlet_name": {
          "description": "**DEPRECATED** Not used.",
          "type": "string"
        },
        "outlet_ids": {
          "description": "An array of outlet IDs that the user is assigned to",
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "account_type": {
          "description": "User's assigned role",
          "type": "string"
        },
        "image": {
          "$ref": "#/definitions/UserImage"
        }
      }
    },
    "UserCollection": {
      "title": "User Collection",
      "description": "A collection of users with an optional pagination object",
      "type": "object",
      "properties": {
        "users": {
          "description": "An array of user objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination"
        }
      }
    },
    "UserImage": {
      "title": "User Image",
      "description": "An object containing a address of the user's avatar",
      "type": "object",
      "properties": {
        "sl": {
          "description": "The URL of the image.",
          "type": "string"
        }
      }
    },
    "Webhook": {
      "title": "Webhook",
      "description": "Webhook object",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Auto-generated object ID.",
          "format": "uuid"
        },
        "retailer_id": {
          "type": "string",
          "description": "The ID of the retailer which the webhook request originated from.",
          "format": "uuid"
        },
        "active": {
          "description": "Indicates whether the webhook is active.",
          "type": "boolean"
        },
        "type": {
          "description": "Webhook type. One of: `product.update`, `inventory.update`, `sale.update`, `customer.update`, `consignment.receive`.",
          "type": "string"
        },
        "url": {
          "description": "The URL of the endpoint prepared for receiving webhooks.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "retailer_id",
        "active",
        "type",
        "url"
      ]
    },
    "WebhookDeleteSuccess": {
      "title": "Webhook Delete Success",
      "type": "object",
      "properties": {
        "status": {
          "description": "Status of request.",
          "type": "string"
        }
      },
      "required": [
        "status"
      ]
    }
  },
  "security": [
    {
      "personal_token": []
    }
  ],
  "securityDefinitions": {
    "personal_token": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}
